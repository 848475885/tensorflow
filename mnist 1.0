import tensorflow as tf
import input_data
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)
#MNIST数据集相关的常数
INPUT_NODE=784
OUTPUT_NODE=10
#配置申江网络的参数
LAYER1_NODE=600
BATCH_SIZE=100
LEARNING_RATE_BASE=0.8     #基础学习率
LEARNING_RATE_DECAY=0.99   #学习率衰减率
REGULARIZATION_RATE=0.0001  #描述模型复杂度的正则化项在损失函数中的系数
TRAINING_STEPS = 30000      #训练轮数
MOVING_AVERAGE_DECAY=0.99    #滑动平均衰减率
#定义一个辅助函数，给定神经网络的输入和所有参数，计算神经网络的前向传播结果。在这里定义了一个使用ReLU激活函数的
#前三层全连接神经网络。通过加入隐藏层实现多层神经网络。这个函数支持传入用于计算参数平均值的类，这样方便在测试时使用滑动品均模型
def inference(input_tensor,avg_class,weights1,biases1,weights2,biases2):
    #当没有提供滑动平均类时，直接使用参数当前的取值
    if avg_class==None:
        #计算隐藏层的前向传播结果
        layer1=tf.nn.relu(tf.matmul(input_tensor,weights1)+biases1)
        #计算输出层前向传播的结果。因为在计算损失函数时会一并计算softmax函数，所以这里不需要加入激活函数。不加入softmax不会影响预期结果
        #因为预测时使用的是不同类别对应节点输出值的相对大小，有没有softmax层对分类结果的计算没有影响。
        return tf.matmul(layer1,weights2)+biases2
    else :
        #首先使用avg_class.average函数来计算得出变量的滑动平均值
        #然后再计算相应的神经网络的前向传播结果。
        layer1=tf.nn.relu(tf.matmul(input_tensor,avg_class.average(weights1))+avg_class.average(biases1))
        return tf.matmul(layer1,avg_class.average(weights2))+avg_class.average(biases2)
 def train(mnist):
    x=tf.placeholder(tf.float32,[None,INPUT_NODE],name='x-input')
    y_=tf.placeholder(tf.float32,[None,OUTPUT_NODE],name='y-input')
    #生成隐藏层的参数
    weights1=tf.Variable(tf.truncated_normal([INPUT_NODE,LAYER1_NODE],stddev=0.1))
    biases1=tf.Variable(tf.constant(0.1,shape=[LAYER1_NODE]))
    #生成输出层的参数。
    weights2=tf.Variable(tf.truncated_normal([LAYER1_NODE,OUTPUT_NODE],stddev=0.1))
    biases2=tf.Variable(tf.constant(0.1,shape=[OUTPUT_NODE]))
    #计算在当前参数下神经网络前向传播的结果。这里给出的用于计算滑动平均的类为None
    y=inference(x,None,weights1,biases1,weights2,biases2)
    #定义存储训练轮数的变量。这个变量不需要计算滑动平均值，所以这里指定这个变量为不可训练的变量（trainable=False）
    #在使用RensorFlow训练神经网络时，一般会将代表训练轮数的变量指定为不可训练的参数
    global_step=tf.Variable(0,trainable=False)
    #给定滑动平均衰减率和训练轮数的变量，初始化滑动平均类。给定训练轮数的变量可以加快训练早期变量的更新速度
    variable_averages=tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY,global_step)
    #在所有代表神经网络参数的变量上使用滑动平均。其他辅助变量比如global_step就不需要了。
    #tf.trainable_variables返回的就是图上集合
    #GraphKeys.TRAINABLE_VARIABLES中的元素。
    variable_averages_op=variable_averages.apply(tf.trainable_variables())
    #计算使用了滑动平均之后的前向传播结果。滑动平均不会改变变量本身，而是会维护一个影子变量来记录其滑动平均值。
    #所以需要使用滑动平均值时需要明确调用average函数
    average_y=inference(x,variable_averages,weights1,biases1,weights2,biases2)
    #计算交叉熵作为刻画预测值和真实值之间差距的损失函数。这里使用了TensorFlow提供的sparse_softmax_cross_entropy_with_logits
    #函数来计算交叉熵。当分类问题只有一个正确答案时，可以使用这个函数加速交叉熵的计算。MNISt问题中的图片只包含0-9
    #中的一个数字，所以可以使用这个函数来计算交叉熵损失。这个函数的第一个参数时神经网络不包括softmax层的前向传播结果
    #第二个参数时训练数据的正确答案。因为标准答案是一个长度为10的一维数组，而该函数需要提供的是一个正确答案的数字
    #所以需要使用tf.argmax函数来得到正确答案对应的类别编号
    cross_entropy=tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y,labels=tf.argmax(y_,1))
    #计算在当前batch中所有样例的交叉熵平均值
    cross_entropy_mean=tf.reduce_mean(cross_entropy)
    #计算L2正则化损失函数
    regularizer=tf.contrib.layers.l2_regularizer(REGULARIZATION_RATE)
    #计算模型的正则化损失。一般只计算神经网络边上权重的正则化损失，而不用偏置项
    regularization=regularizer(weights1)+regularizer(weights2)
    #总损失等于交叉熵损失和正则化损失的和
    loss=cross_entropy_mean+regularization
    #设置指数衰减的学习率
    learning_rate=tf.train.exponential_decay(LEARNING_RATE_BASE,global_step,mnist.train.num_examples/BATCH_SIZE,LEARNING_RATE_DECAY)
    train_step=tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)
    with tf.control_dependencies([train_step,variable_averages_op]):
        train_op=tf.no_op(name='train')
    correct_prediction=tf.equal(tf.argmax(average_y,1),tf.argmax(y_,1))
    accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        validate_feed={x:mnist.validation.images,y_:mnist.validation.labels}
        test_feed={x:mnist.test.images,y_:mnist.test.labels}
        for i in range(TRAINING_STEPS):
            if i%1000==0:
                validate_acc=sess.run(accuracy,feed_dict=validate_feed)
                print("trainning steps:")
                print(i)
                print("the accuracy")
                print(validate_acc)
                xs,ys=mnist.train.next_batch(BATCH_SIZE)
                sess.run(train_op,feed_dict={x:xs,y_:ys})
                
        test_acc=sess.run(accuracy,feed_dict=test_feed)
        print("test accuracy")
        print(test_acc)
def main(argv=None):
  
  mnist = input_data.read_data_sets('MNIST_data', one_hot=True)
  train(mnist)
if __name__=='__main__':
    tf.app.run()
